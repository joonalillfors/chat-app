{"version":3,"sources":["components/usernames.js","components/messages.js","components/users.js","components/login.js","components/authentication-bar.js","components/emoji.js","components/input.js","App.js","serviceWorker.js","components/socket.js","components/reducer.js","index.js"],"names":["nameGetter","Chance","getAName","first","Messages","state","key","height","hasScrolled","getKey","_this","setState","console","log","window","scrollY","this","innerHeight","document","body","scrollHeight","scrollTo","i","react_default","a","createElement","id","props","messages","map","msg","Component","Users","_ref","users","user","name","loginService","Object","asyncToGenerator","regenerator_default","mark","_callee","ctx","res","wrap","_context","prev","next","axios","post","sent","abrupt","data","stop","_x","apply","arguments","AuthBar","app","_app$props","logged","username","password","onClick","logout","onSubmit","login","type","value","onChange","handleNameChange","handlePwChange","href","EmojiBox","onEmojiClick","showWhenVisible","display","visible","style","dist_default","preload","InputBar","components_emoji","code","emoji","dispatch","message","EmojiConvertor","replace_colons","concat","getElementById","focus","action","sendIn","className","autoComplete","handleChange","App","event","preventDefault","_this$props","target","_this$props2","_dispatch","localStorage","setItem","JSON","stringify","t0","loggedUserJSON","getItem","parse","_this$props3","persons","messages_Messages","authentication_bar","components_users","input","connect","loggedUser","Boolean","location","hostname","match","socket","io","confSocket","on","changeName","newPersons","includes","indexOf","push","reducer","length","undefined","objectSpread","emit","removeItem","__webpack_require__","d","__webpack_exports__","src_socket","store","createStore","ReactDOM","render","es","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba46763b.chunk.js","sourcesContent":["import Chance from 'chance'\n\nconst nameGetter = new Chance()\n\nexport const getAName = () => nameGetter.first()","import React, {Component} from 'react'\n\nexport default class Messages extends Component {\n  state = {\n    key: 0,\n  }\n\n  height = 0\n  hasScrolled = true\n\n  componentDidUpdate() {\n    // TODO dont scroll always\n    console.log(\"ayy\")\n    console.log(window.scrollY)\n    console.log(this.height)\n    console.log(window.innerHeight)\n    console.log(document.body.scrollHeight)\n    if (window.scrollY === (this.height-window.innerHeight)) {\n      window.scrollTo(0, document.body.scrollHeight)\n    }\n    this.height = document.body.scrollHeight\n  }\n\n  getKey = () => {\n    this.setState({key: this.state.key+1})\n    return this.state.key\n  }\n\n  render () {\n    var i = 0\n    return (\n      <ul id='messages'>\n        {this.props.messages.map(msg => \n          <li key={i++}>{msg}</li>\n        )}\n      </ul>\n    )\n  }\n}\n","import React from 'react'\n\nconst Users = ({users, user}) => {\n    var i = 0\n    return (\n        <ul id=\"users\">\n            <li>Online users:</li>\n            {users.map(name => \n                {if (name === user)\n                    return <li key={i++}>{name} <span id='me'>(you)</span></li>\n                else\n                    return <li key={i++}>{name}</li>\n                }\n            )}\n        </ul>\n    )\n}\n\nexport default Users","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst loginService = async (ctx) => {\n    const res = await axios.post(baseUrl, ctx)\n    return res.data\n}\n\nexport default loginService","import React from 'react'\n\nconst AuthBar = ({app}) => {\n    const {logged, username, password} = app.props\n    if (logged) {\n      return (\n        <button id=\"users\" onClick={app.logout}>Log out</button>\n      )\n    }\n\n    return (\n      <div>\n        <form onSubmit={app.login}>\n          Username:\n          <input type=\"text\" value={username} onChange={app.handleNameChange}></input>\n          Password:\n          <input type=\"password\" value={password} onChange={app.handlePwChange}></input>\n          <button>Log in</button>\n        </form>\n\n        <a href=\"/api/signup\"><button>Register</button></a>\n      </div>\n    )\n  }\n\n  export default AuthBar","import EmojiPicker from 'emoji-picker-react'\nimport React from 'react'\n\nconst EmojiBox = ({onEmojiClick, visible}) => {\n    const showWhenVisible = { display: visible ? '' : 'none' }\n    return (\n        <div id=\"emojiBox\" style={showWhenVisible}>\n            <EmojiPicker onEmojiClick={onEmojiClick} preload/>\n        </div>\n    )\n}\n\nexport default EmojiBox","import React from 'react'\nimport EmojiConvertor from 'emoji-js'\nimport EmojiBox from './emoji'\n\n\nconst InputBar = ({app}) => {\n    const emojiClick = (code, emoji) => {\n        const {dispatch, message} = app.props\n        let emojiPic = new EmojiConvertor().replace_colons(`:${emoji.name}:`)\n        dispatch({type: 'typing', msg: message+emojiPic})\n        document.getElementById(\"m\").focus()\n    }\n\n    const toggleEmojiBox = () => {\n        app.setState({emoji: !app.state.emoji})\n    }\n\n    return (\n        <div>\n            <EmojiBox onEmojiClick={emojiClick} visible={app.state.emoji} />\n            <form action=\"\" onSubmit={app.sendIn} className=\"message\">\n            <input \n                id=\"m\" \n                autoComplete=\"off\" \n                value={app.props.message} \n                onChange={app.handleChange}\n            />\n            <div onClick={toggleEmojiBox} id=\"emoji\"><i className=\"far fa-grin fa-2x\"></i></div>\n            <button>Send</button>\n            </form>\n        </div>\n    )\n}\n\nexport default InputBar\n","import React, { Component } from 'react'\nimport './App.css'\nimport {getAName} from './components/usernames'\nimport {connect} from 'react-redux'\nimport Messages from './components/messages'\nimport Users from './components/users'\nimport loginService from './components/login'\nimport AuthBar from './components/authentication-bar'\nimport InputBar from './components/input'\n\nclass App extends Component {\n  state = {\n    emoji: false,\n  }\n\n  componentDidMount() {\n    const loggedUserJSON = window.localStorage.getItem('loggedUserJSON')\n    const {dispatch} = this.props\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      dispatch({type: 'LOGIN', user})\n    } else {\n      const name = getAName()\n      dispatch({type: 'username', name})\n    }\n  }\n\n  sendIn = (event) => {\n    event.preventDefault()\n    const {dispatch, user, message} = this.props\n    dispatch({type: 'chat message', msg: user+': '+message})\n  }\n\n  handleChange = (event) => {\n    const {dispatch} = this.props\n    dispatch({type: 'typing', msg: event.target.value})\n  }\n\n  handleNameChange = (event) => {\n    const {dispatch} = this.props\n    dispatch({type: 'TYPING_USERNAME', username: event.target.value})\n  }\n\n  handlePwChange = (event) => {\n    const {dispatch} = this.props\n    dispatch({type: 'TYPING_PASSWORD', password: event.target.value})\n  }\n\n  login = async (event) => {\n    event.preventDefault()\n    try {\n      const {dispatch, username, password} = this.props\n      const user = await loginService({\n        username,\n        password\n      })\n      \n      dispatch({type: 'LOGIN', user})\n      window.localStorage.setItem('loggedUserJSON', JSON.stringify(user))\n    } catch (e) {\n      const {dispatch} = this.props\n      console.log('login failed')\n      dispatch({type: 'FAILED_LOGIN'})\n    }\n  }\n\n  logout = (event) => {\n    const {dispatch} = this.props\n    const name = getAName()\n    dispatch({type: 'LOGOUT', name})\n  }\n \n  render() {\n    const {messages, persons, user} = this.props\n    return (\n      <div className=\"App\">\n        <Messages messages={messages}/>\n        <div id=\"rightBar\">\n          <AuthBar app={this} />\n          <Users users={persons} user={user} />\n        </div>\n        <InputBar app={this} /> \n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  persons: state.persons,\n  messages: state.messages,\n  message: state.message,\n  user: state.user,\n  logged: state.logged,\n  username: state.username,\n  password: state.password,\n  loggedUser: state.user\n})\n\nexport default connect(mapStateToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import io from 'socket.io-client'\n\nconst socket = io('http://localhost:3001')\n\nconst confSocket = dispatch => {\n    socket.on('chat message', msg => {\n        dispatch({type: 'socket message', msg})\n    })\n\n    socket.on('users', users => {\n        dispatch({type: 'users', users})\n    })\n\n    return socket\n}\n\nexport default confSocket","import {socket} from '../index'\n\nconst changeName = (state, name) => {\n    const newPersons = state.persons\n    if (newPersons.includes(state.user)) {\n        newPersons[newPersons.indexOf(state.user)] = name\n    } else {\n        newPersons.push(name)\n    }\n    return newPersons\n}\n\nconst reducer = (\n    state = {\n        persons: [],\n        messages: [],\n        message: '',\n        user: '',\n        logged: false,\n        username: '',\n        password: '',\n        loggedUser: null\n    },\n    action\n) => {\n    switch (action.type) {\n        case 'chat message':\n            state = {...state, message: ''}\n            socket && socket.emit('chat message', action.msg)\n            break\n        case 'username':\n            state = {...state, user: action.name}\n            socket && socket.emit('connected', state.user)\n            break\n        case 'typing':\n            state = {...state, message: action.msg}\n            break\n        case 'socket message':\n            state = {...state, messages: state.messages.concat(action.msg)}\n            break\n        case 'users':\n            state = {...state, persons: action.users}\n            break\n        case 'TYPING_USERNAME':\n            state = {...state, username: action.username}\n            break\n        case 'TYPING_PASSWORD':\n            state = {...state, password: action.password}\n            break\n        case 'LOGIN':\n            socket && socket.emit('log', action.user.username)\n            state = {...state, persons: changeName(state, action.user.username), user: action.user.username, username: '', password: '', loggedUser: action.user, logged: true}\n            break\n        case 'LOGOUT':\n            window.localStorage.removeItem('loggedUserJSON')\n            socket && socket.emit('log', action.name)\n            state = {...state, persons: changeName(state, action.name), user: action.name, loggedUser: null, logged: false}\n            break\n        case 'FAILED_LOGIN':\n            state = {...state, username: '', password: ''}\n            break\n    }\n    return state\n}\n\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport confSocket from './components/socket'\nimport {createStore} from 'redux'\nimport reducer from './components/reducer'\nimport {Provider} from 'react-redux'\nconst store = createStore(reducer)\n\nexport const socket = confSocket(store.dispatch)\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}