{"map":"{\"version\":3,\"sources\":[\"/Users/joona/git/chat-app/client/src/usernames.js\",\"/Users/joona/git/chat-app/client/src/App.js\",\"/Users/joona/git/chat-app/client/src/serviceWorker.js\",\"/Users/joona/git/chat-app/client/src/index.js\"],\"names\":[\"nameGetter\",\"Chance\",\"getAName\",\"first\",\"socket\",\"io\",\"Messages\",\"_ref\",\"app\",\"react_default\",\"a\",\"createElement\",\"id\",\"state\",\"messages\",\"map\",\"msg\",\"App\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"send\",\"event\",\"preventDefault\",\"emit\",\"user\",\"message\",\"setState\",\"on\",\"prev\",\"toConsumableArray\",\"concat\",\"handleChange\",\"target\",\"value\",\"persons\",\"className\",\"App_Messages\",\"action\",\"onSubmit\",\"autocomplete\",\"onChange\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"kSAEMA,EAAa,WAAIC,GAEVC,EAAW,WAAA,OAAMF,EAAWG,SCCnCC,EAASC,GAAAA,CAAG,yBAEZC,EAAW,SAAAC,GAAW,IAATC,EAASD,EAATC,IACjB,OACEC,EAAAC,EAAAC,cAAA,KAAA,CAAIC,GAAG,YACJJ,EAAIK,MAAMC,SAASC,IAAI,SAAAC,GAAG,OACzBP,EAAAC,EAAAC,cAAA,KAAA,KAAA,WAmDOM,cA5Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASRQ,KAAO,SAACC,GACNA,EAAMC,iBACNxB,EAAOyB,KAAK,eAAgBV,EAAKN,MAAMiB,KAAO,KAAKX,EAAKN,MAAMkB,SAC9DZ,EAAKa,SAAS,CAACD,QAAS,KACxB3B,EAAO6B,GAAG,eAAgB,SAACjB,GACzBG,EAAKa,SAAS,SAAAE,GAAI,MAAK,CACrBpB,SAASM,OAAAe,EAAA,EAAAf,CAAKc,EAAKpB,UAAXsB,OAAA,CAAqBpB,UAhBhBG,EAqBnBkB,aAAe,SAACV,GACdR,EAAKa,SAAS,CAACD,QAASJ,EAAMW,OAAOC,SApBrCpB,EAAKN,MAAQ,CACX2B,QAAS,GACT1B,SAAU,GACViB,QAAS,GACTD,KAAM5B,KANSiB,wEA2BjB,OACEV,EAAAC,EAAAC,cAAA,MAAA,CAAK8B,UAAU,OACbhC,EAAAC,EAAAC,cAAC+B,EAAD,CAAUlC,IAAKc,OACfb,EAAAC,EAAAC,cAAA,OAAA,CAAMgC,OAAO,GAAGC,SAAUtB,KAAKI,MAC7BjB,EAAAC,EAAAC,cAAA,QAAA,CACEC,GAAG,IACHiC,aAAa,MACbN,MAAOjB,KAAKT,MAAMkB,QAClBe,SAAUxB,KAAKe,eAEjB5B,EAAAC,EAAAC,cAAA,SAAA,KAAA,iBAtCQoC,EAAAA,WCLEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,EAAAA,EAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import Chance from 'chance'\\n\\nconst nameGetter = new Chance()\\n\\nexport const getAName = () => nameGetter.first()\",\"import React, { Component } from 'react'\\nimport io from 'socket.io-client'\\nimport './App.css'\\nimport {getAName} from './usernames'\\n\\nconst socket = io('http://localhost:3000')\\n\\nconst Messages = ({app}) => {\\n  return (\\n    <ul id='messages'>\\n      {app.state.messages.map(msg => \\n        <li>msg</li>\\n      )}\\n    </ul>\\n  )\\n}\\n\\nclass App extends Component {\\n  constructor(props) {\\n    super(props)\\n    this.state = {\\n      persons: [],\\n      messages: [],\\n      message: '',\\n      user: getAName()\\n    }\\n  }\\n\\n  send = (event) => {\\n    event.preventDefault()\\n    socket.emit('chat message', this.state.user + ': '+this.state.message)\\n    this.setState({message: ''})\\n    socket.on('chat message', (msg) => {\\n      this.setState(prev => ({\\n        messages: [...prev.messages, msg]\\n      }))\\n    })\\n  }\\n\\n  handleChange = (event) => {\\n    this.setState({message: event.target.value})\\n  }\\n\\n\\n  render() {\\n    return (\\n      <div className=\\\"App\\\">\\n        <Messages app={this} />\\n        <form action=\\\"\\\" onSubmit={this.send}>\\n          <input \\n            id=\\\"m\\\" \\n            autocomplete=\\\"off\\\" \\n            value={this.state.message} \\n            onChange={this.handleChange}\\n          />\\n          <button>Send</button>\\n        </form>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{35:function(e,t,n){e.exports=n(70)},65:function(e,t){},68:function(e,t,n){},70:function(e,t,n){\"use strict\";n.r(t);var a=n(0),s=n.n(a),o=n(26),r=n.n(o),c=n(32),i=n(27),u=n(28),l=n(33),m=n(29),h=n(34),g=n(30),f=n.n(g),p=(n(68),n(31)),d=new(n.n(p).a),w=function(){return d.first()},v=f()(\"http://localhost:3000\"),b=function(e){var t=e.app;return s.a.createElement(\"ul\",{id:\"messages\"},t.state.messages.map(function(e){return s.a.createElement(\"li\",null,\"msg\")}))},E=function(e){function t(e){var n;return Object(i.a)(this,t),(n=Object(l.a)(this,Object(m.a)(t).call(this,e))).send=function(e){e.preventDefault(),v.emit(\"chat message\",n.state.user+\": \"+n.state.message),n.setState({message:\"\"}),v.on(\"chat message\",function(e){n.setState(function(t){return{messages:Object(c.a)(t.messages).concat([e])}})})},n.handleChange=function(e){n.setState({message:e.target.value})},n.state={persons:[],messages:[],message:\"\",user:w()},n}return Object(h.a)(t,e),Object(u.a)(t,[{key:\"render\",value:function(){return s.a.createElement(\"div\",{className:\"App\"},s.a.createElement(b,{app:this}),s.a.createElement(\"form\",{action:\"\",onSubmit:this.send},s.a.createElement(\"input\",{id:\"m\",autocomplete:\"off\",value:this.state.message,onChange:this.handleChange}),s.a.createElement(\"button\",null,\"Send\")))}}]),t}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(s.a.createElement(E,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[35,2,1]]]);","extractedComments":[]}