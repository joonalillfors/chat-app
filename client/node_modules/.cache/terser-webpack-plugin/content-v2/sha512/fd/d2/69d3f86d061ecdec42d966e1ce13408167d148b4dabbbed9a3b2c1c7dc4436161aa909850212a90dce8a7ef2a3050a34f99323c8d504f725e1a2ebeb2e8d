{"map":"{\"version\":3,\"sources\":[\"/Users/joona/git/chat-app/client/src/components/usernames.js\",\"/Users/joona/git/chat-app/client/src/components/messages.js\",\"/Users/joona/git/chat-app/client/src/components/users.js\",\"/Users/joona/git/chat-app/client/src/App.js\",\"/Users/joona/git/chat-app/client/src/serviceWorker.js\",\"/Users/joona/git/chat-app/client/src/components/socket.js\",\"/Users/joona/git/chat-app/client/src/components/reducer.js\",\"/Users/joona/git/chat-app/client/src/index.js\"],\"names\":[\"nameGetter\",\"Chance\",\"Messages\",\"_ref\",\"messages\",\"i\",\"react_default\",\"a\",\"createElement\",\"id\",\"map\",\"msg\",\"key\",\"Users\",\"users\",\"user\",\"App\",\"sendIn\",\"event\",\"preventDefault\",\"_this$props\",\"_this\",\"props\",\"dispatch\",\"type\",\"message\",\"handleChange\",\"target\",\"value\",\"this\",\"name\",\"first\",\"_this$props2\",\"persons\",\"className\",\"components_messages\",\"components_users\",\"action\",\"onSubmit\",\"autoComplete\",\"onChange\",\"Component\",\"connect\",\"state\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"socket\",\"io\",\"confSocket\",\"on\",\"reducer\",\"arguments\",\"length\",\"undefined\",\"Object\",\"objectSpread\",\"emit\",\"concat\",\"__webpack_require__\",\"d\",\"__webpack_exports__\",\"src_socket\",\"store\",\"createStore\",\"ReactDOM\",\"render\",\"es\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"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\",\"sourcesContent\":[\"import Chance from 'chance'\\n\\nconst nameGetter = new Chance()\\n\\nexport const getAName = () => nameGetter.first()\",\"import React from 'react'\\n\\nconst Messages = ({messages}) => {\\n  var i = 0\\n  return (\\n    <ul id='messages'>\\n      {messages.map(msg => \\n        <li key={i++}>{msg}</li>\\n      )}\\n    </ul>\\n  )\\n}\\n\\nexport default Messages\",\"import React from 'react'\\n\\nconst Users = ({users}) => {\\n    var i = 0\\n    return (\\n        <ul id=\\\"users\\\">\\n            <li>Online users:</li>\\n            {users.map(user => \\n                <li key={i++}>{user}</li>\\n            )}\\n        </ul>\\n    )\\n}\\n\\nexport default Users\",\"import React, { Component } from 'react'\\nimport './App.css'\\nimport {getAName} from './components/usernames'\\nimport {connect} from 'react-redux'\\nimport Messages from './components/messages'\\nimport Users from './components/users'\\n\\nclass App extends Component {\\n  componentDidMount() {\\n    const {dispatch} = this.props\\n    const name = getAName()\\n    dispatch({type: 'username', name})\\n  }\\n\\n  sendIn = (event) => {\\n    event.preventDefault()\\n    const {dispatch, user, message} = this.props\\n    dispatch({type: 'chat message', msg: user+': '+message})\\n    //sendToServer(user+': '+message)\\n  }\\n\\n  handleChange = (event) => {\\n    const {dispatch} = this.props\\n    dispatch({type: 'typing', msg: event.target.value})\\n  }\\n\\n  render() {\\n    const {message, messages, persons} = this.props\\n    return (\\n      <div className=\\\"App\\\">\\n        <Messages messages={messages}/>\\n        <Users users={persons}/>\\n        <form action=\\\"\\\" onSubmit={this.sendIn}>\\n          <input \\n            id=\\\"m\\\" \\n            autoComplete=\\\"off\\\" \\n            value={message} \\n            onChange={this.handleChange}\\n          />\\n          <button >Send</button>\\n        </form>\\n      </div>\\n    );\\n  }\\n}\\n\\nconst mapStateToProps = state => ({\\n  persons: state.persons,\\n  messages: state.messages,\\n  message: state.message,\\n  user: state.user\\n})\\n\\nexport default connect(mapStateToProps)(App);\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import io from 'socket.io-client'\\n\\nconst socket = io('http://localhost:3001')\\n\\nconst confSocket = dispatch => {\\n    socket.on('chat message', msg => {\\n        dispatch({type: 'socket message', msg})\\n    })\\n\\n    socket.on('users', users => {\\n        dispatch({type: 'users', users})\\n    })\\n\\n    return socket\\n}\\n\\nexport default confSocket\",\"import {socket} from '../index'\\n\\nconst reducer = (\\n    state = {\\n        persons: [],\\n        messages: [],\\n        message: '',\\n        user: ''\\n    },\\n    action\\n) => {\\n    switch (action.type) {\\n        case 'chat message':\\n            state = {...state, message: ''}\\n            socket && socket.emit('chat message', action.msg)\\n            break\\n        case 'username':\\n            state = {...state, user: action.name}\\n            socket && socket.emit('connected', state.user)\\n            break\\n        case 'typing':\\n            state = {...state, message: action.msg}\\n            break\\n        case 'socket message':\\n            state = {...state, messages: state.messages.concat(action.msg)}\\n            break\\n        case 'users':\\n            state = {...state, persons: action.users}\\n            break\\n    }\\n    return state\\n}\\n\\nexport default reducer\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\nimport confSocket from './components/socket'\\nimport {createStore} from 'redux'\\nimport reducer from './components/reducer'\\nimport {Provider} from 'react-redux'\\nconst store = createStore(reducer)\\n\\nexport const socket = confSocket(store.dispatch)\\n\\nReactDOM.render(\\n    <Provider store={store}>\\n        <App />\\n    </Provider>, \\n    document.getElementById('root')\\n);\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{43:function(e,t,n){e.exports=n(82)},48:function(e,t,n){},79:function(e,t){},82:function(e,t,n){\"use strict\";n.r(t);var s=n(0),a=n.n(s),r=n(33),c=n.n(r),o=n(34),u=n(35),i=n(41),m=n(36),l=n(42),p=(n(48),n(37)),g=new(n.n(p).a),h=n(11),d=function(e){var t=e.messages,n=0;return a.a.createElement(\"ul\",{id:\"messages\"},t.map(function(e){return a.a.createElement(\"li\",{key:n++},e)}))},f=function(e){var t=e.users,n=0;return a.a.createElement(\"ul\",{id:\"users\"},a.a.createElement(\"li\",null,\"Online users:\"),t.map(function(e){return a.a.createElement(\"li\",{key:n++},e)}))},b=function(e){function t(){var e,n;Object(o.a)(this,t);for(var s=arguments.length,a=new Array(s),r=0;r<s;r++)a[r]=arguments[r];return(n=Object(i.a)(this,(e=Object(m.a)(t)).call.apply(e,[this].concat(a)))).sendIn=function(e){e.preventDefault();var t=n.props;(0,t.dispatch)({type:\"chat message\",msg:t.user+\": \"+t.message})},n.handleChange=function(e){(0,n.props.dispatch)({type:\"typing\",msg:e.target.value})},n}return Object(l.a)(t,e),Object(u.a)(t,[{key:\"componentDidMount\",value:function(){(0,this.props.dispatch)({type:\"username\",name:g.first()})}},{key:\"render\",value:function(){var e=this.props,t=e.message,n=e.messages,s=e.persons;return a.a.createElement(\"div\",{className:\"App\"},a.a.createElement(d,{messages:n}),a.a.createElement(f,{users:s}),a.a.createElement(\"form\",{action:\"\",onSubmit:this.sendIn},a.a.createElement(\"input\",{id:\"m\",autoComplete:\"off\",value:t,onChange:this.handleChange}),a.a.createElement(\"button\",null,\"Send\")))}}]),t}(s.Component),v=Object(h.b)(function(e){return{persons:e.persons,messages:e.messages,message:e.message,user:e.user}})(b);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var y=n(40),k=n.n(y)()(\"http://localhost:3001\"),w=function(e){return k.on(\"chat message\",function(t){e({type:\"socket message\",msg:t})}),k.on(\"users\",function(t){e({type:\"users\",users:t})}),k},E=n(10),O=n(5),j=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{persons:[],messages:[],message:\"\",user:\"\"},t=arguments.length>1?arguments[1]:void 0;switch(t.type){case\"chat message\":e=Object(O.a)({},e,{message:\"\"}),I&&I.emit(\"chat message\",t.msg);break;case\"username\":e=Object(O.a)({},e,{user:t.name}),I&&I.emit(\"connected\",e.user);break;case\"typing\":e=Object(O.a)({},e,{message:t.msg});break;case\"socket message\":e=Object(O.a)({},e,{messages:e.messages.concat(t.msg)});break;case\"users\":e=Object(O.a)({},e,{persons:t.users})}return e};n.d(t,\"socket\",function(){return I});var C=Object(E.b)(j),I=w(C.dispatch);c.a.render(a.a.createElement(h.a,{store:C},a.a.createElement(v,null)),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[43,2,1]]]);","extractedComments":[]}