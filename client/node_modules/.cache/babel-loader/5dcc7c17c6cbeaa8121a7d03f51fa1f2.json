{"ast":null,"code":"import _objectSpread from \"/Users/joona/git/chat-app/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { socket } from '../index';\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    persons: [],\n    messages: [],\n    message: '',\n    user: '',\n    logged: false,\n    username: '',\n    password: '',\n    loggedUser: null\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'chat message':\n      state = _objectSpread({}, state, {\n        message: ''\n      });\n      socket && socket.emit('chat message', action.msg);\n      break;\n\n    case 'username':\n      state = _objectSpread({}, state, {\n        user: action.name\n      });\n      socket && socket.emit('connected', state.user);\n      break;\n\n    case 'typing':\n      state = _objectSpread({}, state, {\n        message: action.msg\n      });\n      break;\n\n    case 'socket message':\n      state = _objectSpread({}, state, {\n        messages: state.messages.concat(action.msg)\n      });\n      break;\n\n    case 'users':\n      state = _objectSpread({}, state, {\n        persons: action.users\n      });\n      break;\n\n    case 'TYPING_USERNAME':\n      state = _objectSpread({}, state, {\n        username: action.username\n      });\n      break;\n\n    case 'TYPING_PASSWORD':\n      state = _objectSpread({}, state, {\n        password: action.password\n      });\n      break;\n\n    case 'LOGIN':\n      state = _objectSpread({}, state, {\n        user: state.username,\n        username: '',\n        password: '',\n        loggedUser: action.user\n      });\n      break;\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/joona/git/chat-app/client/src/components/reducer.js"],"names":["socket","reducer","state","persons","messages","message","user","logged","username","password","loggedUser","action","type","emit","msg","name","concat","users"],"mappings":";AAAA,SAAQA,MAAR,QAAqB,UAArB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAYX;AAAA,MAXDC,KAWC,uEAXO;AACJC,IAAAA,OAAO,EAAE,EADL;AAEJC,IAAAA,QAAQ,EAAE,EAFN;AAGJC,IAAAA,OAAO,EAAE,EAHL;AAIJC,IAAAA,IAAI,EAAE,EAJF;AAKJC,IAAAA,MAAM,EAAE,KALJ;AAMJC,IAAAA,QAAQ,EAAE,EANN;AAOJC,IAAAA,QAAQ,EAAE,EAPN;AAQJC,IAAAA,UAAU,EAAE;AARR,GAWP;AAAA,MADDC,MACC;;AACD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,cAAL;AACIV,MAAAA,KAAK,qBAAOA,KAAP;AAAcG,QAAAA,OAAO,EAAE;AAAvB,QAAL;AACAL,MAAAA,MAAM,IAAIA,MAAM,CAACa,IAAP,CAAY,cAAZ,EAA4BF,MAAM,CAACG,GAAnC,CAAV;AACA;;AACJ,SAAK,UAAL;AACIZ,MAAAA,KAAK,qBAAOA,KAAP;AAAcI,QAAAA,IAAI,EAAEK,MAAM,CAACI;AAA3B,QAAL;AACAf,MAAAA,MAAM,IAAIA,MAAM,CAACa,IAAP,CAAY,WAAZ,EAAyBX,KAAK,CAACI,IAA/B,CAAV;AACA;;AACJ,SAAK,QAAL;AACIJ,MAAAA,KAAK,qBAAOA,KAAP;AAAcG,QAAAA,OAAO,EAAEM,MAAM,CAACG;AAA9B,QAAL;AACA;;AACJ,SAAK,gBAAL;AACIZ,MAAAA,KAAK,qBAAOA,KAAP;AAAcE,QAAAA,QAAQ,EAAEF,KAAK,CAACE,QAAN,CAAeY,MAAf,CAAsBL,MAAM,CAACG,GAA7B;AAAxB,QAAL;AACA;;AACJ,SAAK,OAAL;AACIZ,MAAAA,KAAK,qBAAOA,KAAP;AAAcC,QAAAA,OAAO,EAAEQ,MAAM,CAACM;AAA9B,QAAL;AACA;;AACJ,SAAK,iBAAL;AACIf,MAAAA,KAAK,qBAAOA,KAAP;AAAcM,QAAAA,QAAQ,EAAEG,MAAM,CAACH;AAA/B,QAAL;AACA;;AACJ,SAAK,iBAAL;AACIN,MAAAA,KAAK,qBAAOA,KAAP;AAAcO,QAAAA,QAAQ,EAAEE,MAAM,CAACF;AAA/B,QAAL;AACA;;AACJ,SAAK,OAAL;AACIP,MAAAA,KAAK,qBAAOA,KAAP;AAAcI,QAAAA,IAAI,EAAEJ,KAAK,CAACM,QAA1B;AAAoCA,QAAAA,QAAQ,EAAE,EAA9C;AAAkDC,QAAAA,QAAQ,EAAE,EAA5D;AAAgEC,QAAAA,UAAU,EAAEC,MAAM,CAACL;AAAnF,QAAL;AACA;AA1BR;;AA4BA,SAAOJ,KAAP;AACH,CA1CD;;AA4CA,eAAeD,OAAf","sourcesContent":["import {socket} from '../index'\n\nconst reducer = (\n    state = {\n        persons: [],\n        messages: [],\n        message: '',\n        user: '',\n        logged: false,\n        username: '',\n        password: '',\n        loggedUser: null\n    },\n    action\n) => {\n    switch (action.type) {\n        case 'chat message':\n            state = {...state, message: ''}\n            socket && socket.emit('chat message', action.msg)\n            break\n        case 'username':\n            state = {...state, user: action.name}\n            socket && socket.emit('connected', state.user)\n            break\n        case 'typing':\n            state = {...state, message: action.msg}\n            break\n        case 'socket message':\n            state = {...state, messages: state.messages.concat(action.msg)}\n            break\n        case 'users':\n            state = {...state, persons: action.users}\n            break\n        case 'TYPING_USERNAME':\n            state = {...state, username: action.username}\n            break\n        case 'TYPING_PASSWORD':\n            state = {...state, password: action.password}\n            break\n        case 'LOGIN':\n            state = {...state, user: state.username, username: '', password: '', loggedUser: action.user}\n            break\n    }\n    return state\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}